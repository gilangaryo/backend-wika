// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"  
  url      = env("DATABASE_URL")
}


model User {
  userId       Int      @id @default(autoincrement())
  firstName   String
  lastName    String
  email        String   @unique
  phone        String
  role         String
  password     String
  isDeleted    Boolean  @default(false)
  createdAt    DateTime @default(now())
}

model Vendor {
  vendorId    Int      @id @default(autoincrement())
  name        String
  email       String   @unique
  phone       String
  description String
  location    String
  isDeleted   Boolean  @default(false)
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  orders      Order[]
  drivers     Driver[]
}

model Driver {
  driverId     Int      @id @default(autoincrement())
  name         String
  email        String   @unique
  phone        String
  password     String
  licensePlate String
  isDeleted    Boolean  @default(false)

  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  vendorId     Int
  vendor       Vendor   @relation(fields: [vendorId], references: [vendorId])
  orders       Order[]
}

model Order {
  orderId     Int      @id @default(autoincrement())
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  vendorId    Int
  vendor      Vendor   @relation(fields: [vendorId], references: [vendorId])

  driverId    Int?
  driver      Driver?  @relation(fields: [driverId], references: [driverId])

  trackings   Tracking[]
  review      Review?
  poles       Pole[]
}

model Pole {
  poleId       Int      @id @default(autoincrement())
  type         String
  uniqueCode   String   @unique
  numberProduct Int

  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  orderId      Int
  order        Order    @relation(fields: [orderId], references: [orderId])
}

model Tracking {
  trackingId  Int      @id @default(autoincrement())
  status      String   // Enum can be used, but here we keep it as string
  description String
  latitude    Float
  longitude   Float
  licensePlate String
  picture     String
  isValid     Boolean?

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  orderId     Int
  order       Order    @relation(fields: [orderId], references: [orderId])
}

model Admin {
  adminId     Int      @id @default(autoincrement())
  name        String
  phone       String
  email       String   @unique
  password    String
  isSuperAdmin Boolean
  isDeleted   Boolean  @default(false)
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  reviews     Review[]
}


model Review {
  reviewId    Int      @id @default(autoincrement())
  rating      Int
  comment     String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  orderId     Int      @unique
  order       Order    @relation(fields: [orderId], references: [orderId])

  adminId     Int
  admin       Admin    @relation(fields: [adminId], references: [adminId])
}


